Reflect on 5-7 different possible sources of the problem, distill those down to 1-2 most likely sources, and then add logs to validate your assumptions before we move onto implementing the actual code fix.

## Transaction Processing Issues - Fixed on 2025-02-26

### Issues Identified:

1. **PrismaClient Not Defined Error**
   - Error: `PrismaClient is not defined` in transaction processing
   - Root cause: Missing import of PrismaClient in dbClient.ts
   - Fix: Added `import { PrismaClient } from '@prisma/client';` to dbClient.ts

2. **PgBouncer Prepared Statement Errors**
   - Error: `prepared statement "sXXX" does not exist` or `prepared statement "sXXX" already exists`
   - Root cause: Using PgBouncer with prepared statements. PgBouncer doesn't maintain prepared statements between connections.
   - Fix: Modified the withFreshClient method to use DIRECT_URL instead of DATABASE_URL for operations requiring prepared statements
   - Removed DEALLOCATE ALL statements since they're not needed with direct connections

### Connection Configuration Best Practices:

When using Prisma with PgBouncer:
- Use DATABASE_URL with pgbouncer=true for read-only operations
- Use DIRECT_URL for operations that require prepared statements (create, update, delete)
- Ensure both URLs are properly configured in .env:
  ```
  # Connect to Supabase via connection pooling with Supavisor
  DATABASE_URL="postgresql://postgres.aqqxfcazqwjuyjjmuuxn:[PASSWORD]@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?pgbouncer=true"

  # Direct connection to the database. Used for migrations and operations requiring prepared statements
  DIRECT_URL="postgresql://postgres.aqqxfcazqwjuyjjmuuxn:[PASSWORD]@aws-0-eu-central-1.pooler.supabase.com:5432/postgres"
  ```

### Additional Recommendations:

1. Consider adding a connection pool configuration in the DATABASE_URL:
   ```
   DATABASE_URL="...?pgbouncer=true&connection_limit=15&pool_timeout=20"
   ```

2. Add better error handling for database connection issues

3. Consider implementing a retry mechanism for transient database errors

## API Server Database Connection Fix (2025-02-26)

Fixed the API server's database connection issues with PgBouncer:

1. Modified the Prisma client configuration in `src/db/prisma.ts`:
   - Added logic to use DIRECT_URL for operations that require prepared statements
   - Added environment variable `USE_DIRECT_URL` to control this behavior
   - Added logging to track connection details

2. The fix addresses the same PgBouncer prepared statement issues that were fixed in the scanner:
   - PgBouncer's connection pooling interferes with prepared statements
   - Using DIRECT_URL bypasses PgBouncer for operations that need prepared statements
   - This resolves the 503 Service Unavailable errors in the API endpoints

3. To run the server with this fix:
   ```bash
   # Set the environment variable to use DIRECT_URL
   export USE_DIRECT_URL=true
   
   # Start the development server
   npm run dev
   ```

4. For production, consider adding the environment variable to your deployment configuration.

## Vote Options Implementation (2025-02-26)

Enhanced the scanner to properly identify and save vote options to the VoteOption table:

1. Modified `dbClient.ts`:
   - Updated `upsertPost` method to handle vote options
   - Added a new `processVoteOptions` method to save vote options to the database
   - Generated unique txids for each vote option by appending the index to the original txid

2. Enhanced `parser.ts`:
   - Improved vote transaction detection
   - Added proper type identification for vote transactions
   - Enhanced logging for vote options processing
   - Ensured vote options are correctly extracted and passed to the dbClient

The scanner now correctly identifies vote transactions and saves all vote options to the VoteOption table, which are linked to their parent post via the post_id field.
