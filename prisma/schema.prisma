generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  postId         String        @unique
  type           String
  content        Json
  blockTime      DateTime
  sequence       Int
  parentSequence Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  protocol       String        @default("MAP")
  senderAddress  String?
  blockHeight    Int?
  txid           String?
  lockLikes      LockLike[]    @relation("PostLockLikes")
  voteOptions    VoteOption[]
  voteQuestion   VoteQuestion?
  image          Bytes?

  @@index([postId])
  @@index([txid])
  @@index([senderAddress])
  @@index([blockHeight])
}

model VoteQuestion {
  id           String       @id @default(dbgenerated("gen_random_uuid()"))
  postId       String       @unique
  question     String
  totalOptions Int
  optionsHash  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  protocol     String       @default("MAP")
  voteOptions  VoteOption[]
  post         Post         @relation(fields: [postId], references: [postId], onDelete: Cascade, onUpdate: NoAction)

  @@index([postId])
}

model VoteOption {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  postId         String
  voteQuestionId String
  index          Int
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  protocol       String       @default("MAP")
  post           Post         @relation(fields: [postId], references: [postId], onDelete: Cascade, onUpdate: NoAction)
  voteQuestion   VoteQuestion @relation(fields: [voteQuestionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([voteQuestionId])
  @@index([postId])
}

model LockLike {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  txid         String
  lockAmount   Int
  lockDuration Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  postId       String
  post         Post     @relation("PostLockLikes", fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([postId])
}

model ProcessedTransaction {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  txid        String   @unique
  blockHeight Int      @default(0)
  blockTime   BigInt   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  protocol    String   @default("MAP")
  type        String   @default("unknown")
  metadata    Json

  @@index([txid])
  @@index([type])
  @@index([protocol])
  @@index([blockHeight])
}
