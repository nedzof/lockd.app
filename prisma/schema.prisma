generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // Connection pooling is configured in the DATABASE_URL
  // Example URL format: postgresql://user:password@host:6543/db?pgbouncer=true&connection_limit=15&pool_timeout=20
}

model Post {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  txid           String   @unique
  content        String
  author_address String?
  media_type     String?
  media_url      String?
  raw_image_data Bytes?
  created_at     DateTime @default(now())
  tags           String[] @default([])
  is_vote        Boolean  @default(false)
  lock_likes     LockLike[]
  vote_options   VoteOption[]

  @@index([txid])
  @@index([author_address])
  @@index([created_at])
  @@index([tags])
}

model VoteOption {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  txid           String   @unique
  content        String
  author_address String?
  created_at     DateTime @default(now())
  lock_amount    Int      @default(0)
  lock_duration  Int      @default(0)
  unlock_height  Int?
  tags          String[] @default([])
  post_id       String
  post          Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  lock_likes    LockLike[]

  @@index([txid])
  @@index([post_id])
  @@index([created_at])
}

model LockLike {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  txid           String   @unique
  post_id        String
  post           Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  vote_option_id String?
  vote_option    VoteOption? @relation(fields: [vote_option_id], references: [id], onDelete: Cascade)
  author_address String?
  amount         Int
  lock_duration  Int
  unlock_height  Int?
  created_at     DateTime @default(now())

  @@index([post_id])
  @@index([author_address])
  @@index([created_at])
  @@index([vote_option_id])
}

model ProcessedTransaction {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  txid        String   @unique
  blockHeight Int      @default(0)
  blockTime   BigInt   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  protocol    String   @default("MAP")
  type        String   @default("unknown")
  metadata    Json

  @@index([txid])
  @@index([type])
  @@index([protocol])
  @@index([blockHeight])
}

model Tag {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String   @unique
  type        String   @default("user_created") // current_event, user_created, etc.
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([name])
  @@index([type])
  @@index([usageCount])
}

// Statistics model
model Stats {
  id                   String   @id @default(dbgenerated("gen_random_uuid()"))
  total_posts          Int
  total_votes          Int
  total_lock_likes     Int
  total_users          Int
  total_bsv_locked     Float
  avg_lock_duration    Float
  most_used_tag        String?
  most_active_user     String?
  last_updated         DateTime @default(now())

  @@map("stats")
}
