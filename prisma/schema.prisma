generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  content        String
  txid           String       @unique
  author_address String?
  createdAt      DateTime     @default(now()) @map("created_at")
  isVote         Boolean      @default(false) @map("is_vote")
  mediaType      String?      @map("media_type")
  tags           String[]     @default([])
  mediaUrl       String?      @map("media_url")
  rawImageData   Bytes?       @map("raw_image_data")
  blockHeight    Int?         @map("block_height")
  metadata       Json?
  isLocked       Boolean      @default(false) @map("is_locked")
  lockLikes      LockLike[]   @relation("PostLockLikes")
  voteOptions    VoteOption[] @relation("PostVoteOptions")

  @@index([txid])
  @@index([author_address])
  @@index([blockHeight])
  @@index([createdAt])
  @@index([tags])
  @@map("Post")
}

model VoteOption {
  id            String     @id @default(dbgenerated("gen_random_uuid()"))
  content       String
  authorAddress String?    @map("author_address")
  createdAt     DateTime   @default(now()) @map("created_at")
  postId        String     @map("post_id")
  tags          String[]   @default([])
  txid          String     @unique
  optionIndex   Int        @default(0) @map("option_index")
  lockLikes     LockLike[] @relation("VoteOptionLockLikes")
  post          Post       @relation("PostVoteOptions", fields: [postId], references: [id], onDelete: Cascade)

  @@index([txid])
  @@index([createdAt])
  @@index([optionIndex])
  @@index([postId])
  @@map("VoteOption")
}

model LockLike {
  id            String      @id @default(dbgenerated("gen_random_uuid()"))
  txid          String      @unique
  amount        Int
  authorAddress String?     @map("author_address")
  createdAt     DateTime    @default(now()) @map("created_at")
  postId        String      @map("post_id")
  unlockHeight  Int?        @map("unlock_height")
  voteOptionId  String?     @map("vote_option_id")
  post          Post        @relation("PostLockLikes", fields: [postId], references: [id], onDelete: Cascade)
  voteOption    VoteOption? @relation("VoteOptionLockLikes", fields: [voteOptionId], references: [id], onDelete: Cascade)

  @@index([authorAddress])
  @@index([createdAt])
  @@index([postId])
  @@index([voteOptionId])
  @@map("LockLike")
}

model ProcessedTransaction {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  txid        String   @unique
  blockHeight Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  protocol    String   @default("MAP")
  type        String   @default("unknown")
  metadata    Json
  blockTime   BigInt   @default(0)

  @@index([txid])
  @@index([type])
  @@index([protocol])
  @@index([blockHeight])
}

model Tag {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  name       String   @unique
  type       String   @default("user_created")
  usageCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([name])
  @@index([type])
  @@index([usageCount])
}

model bsv_price_history {
  id         Int       @id @default(autoincrement())
  date       DateTime  @unique @db.Date
  price      Float
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

model stats {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  total_posts       Int
  total_votes       Int
  total_lock_likes  Int
  total_users       Int
  total_bsv_locked  Float
  avg_lock_duration Float
  most_used_tag     String?
  most_active_user  String?
  last_updated      DateTime @default(now())
  current_bsv_price Float?
}
