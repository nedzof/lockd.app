generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model LockLike {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  txid          String      @unique @map("txid")
  amount        Int         @map("amount")
  authorAddress String?     @map("author_address")
  createdAt     DateTime    @default(now()) @map("created_at")
  postId        String      @map("post_id")
  unlockHeight  Int?        @map("unlock_height")
  voteOptionId  String?     @map("vote_option_id")
  post          Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  voteOption    VoteOption? @relation(fields: [voteOptionId], references: [id], onDelete: Cascade)

  @@index([authorAddress])
  @@index([createdAt])
  @@index([postId])
  @@index([voteOptionId])
}

model Post {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  content       String       @map("content")
  txid          String       @unique @map("txid")
  authorAddress String?      @map("author_address")
  createdAt     DateTime     @default(now()) @map("created_at")
  isVote        Boolean      @default(false) @map("is_vote")
  mediaType     String?      @map("media_type")
  tags          String[]     @default([]) @map("tags")
  mediaUrl      String?      @map("media_url")
  rawImageData  Bytes?       @map("raw_image_data")
  blockHeight   Int?         @map("block_height")
  metadata      Json?        @map("metadata")
  isLocked      Boolean      @default(false) @map("is_locked")
  lockLikes     LockLike[]
  voteOptions   VoteOption[]

  @@index([authorAddress])
  @@index([blockHeight])
  @@index([createdAt])
  @@index([tags])
  @@index([txid])
}

model ProcessedTransaction {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  txid        String   @unique @map("txid")
  blockHeight Int      @default(0) @map("block_height")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  protocol    String   @default("MAP") @map("protocol")
  type        String   @default("unknown") @map("type")
  metadata    Json     @map("metadata")
  blockTime   BigInt   @default(0) @map("block_time")

  @@index([protocol])
  @@index([txid])
  @@index([type])
  @@index([blockHeight], map: "processed_transaction_block_height_idx")
}

model Tag {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  name       String   @unique @map("name")
  type       String   @default("user_created") @map("type")
  usageCount Int      @default(0) @map("usage_count")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@index([name])
  @@index([type])
  @@index([usageCount])
}

model VoteOption {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  content       String     @map("content")
  authorAddress String?    @map("author_address")
  createdAt     DateTime   @default(now()) @map("created_at")
  postId        String     @map("post_id")
  tags          String[]   @default([]) @map("tags")
  txid          String     @unique @map("txid")
  optionIndex   Int        @default(0) @map("option_index")
  lockLikes     LockLike[]
  post          Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([optionIndex])
  @@index([postId])
  @@index([txid])
}

model BsvPriceHistory {
  id        Int       @id @default(autoincrement()) @map("id")
  date      DateTime  @unique @map("date") @db.Date
  price     Float     @map("price")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("bsv_price_history")
}

model Stats {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  totalPosts      Int      @map("total_posts")
  totalVotes      Int      @map("total_votes")
  totalLockLikes  Int      @map("total_lock_likes")
  totalUsers      Int      @map("total_users")
  totalBsvLocked  Float    @map("total_bsv_locked")
  avgLockDuration Float    @map("avg_lock_duration")
  mostUsedTag     String?  @map("most_used_tag")
  mostActiveUser  String?  @map("most_active_user")
  lastUpdated     DateTime @default(now()) @map("last_updated")
  currentBsvPrice Float?   @map("current_bsv_price")

  @@map("stats")
}
